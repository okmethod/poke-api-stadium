var t,e,a,i,s,o,r,n,l,h=Object.defineProperty,c=t=>{throw TypeError(t)},E=(t,e,a)=>((t,e,a)=>e in t?h(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a)(t,"symbol"!=typeof e?e+"":e,a),d=(t,e,a)=>e.has(t)||c("Cannot "+a),p=(t,e,a)=>(d(t,e,"read from private field"),a?a.call(t):e.get(t)),u=(t,e,a)=>e.has(t)?c("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,a),f=(t,e,a,i)=>(d(t,e,"write to private field"),i?i.call(t,a):e.set(t,a),a);import{w as R}from"./index.CnH4iqqA.js";import{x as w}from"./scheduler.CKlfITpV.js";(l=n||(n={})).LOAD="LOAD",l.EXEC="EXEC",l.WRITE_FILE="WRITE_FILE",l.READ_FILE="READ_FILE",l.DELETE_FILE="DELETE_FILE",l.RENAME="RENAME",l.CREATE_DIR="CREATE_DIR",l.LIST_DIR="LIST_DIR",l.DELETE_DIR="DELETE_DIR",l.ERROR="ERROR",l.DOWNLOAD="DOWNLOAD",l.PROGRESS="PROGRESS",l.LOG="LOG",l.MOUNT="MOUNT",l.UNMOUNT="UNMOUNT";const m=(()=>{let t=0;return()=>t++})(),L=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),g=new Error("called FFmpeg.terminate()");class y{constructor(){u(this,t,null),u(this,e,{}),u(this,a,{}),u(this,i,[]),u(this,s,[]),E(this,"loaded",!1),u(this,o,(()=>{p(this,t)&&(p(this,t).onmessage=({data:{id:t,type:o,data:r}})=>{switch(o){case n.LOAD:this.loaded=!0,p(this,e)[t](r);break;case n.MOUNT:case n.UNMOUNT:case n.EXEC:case n.WRITE_FILE:case n.READ_FILE:case n.DELETE_FILE:case n.RENAME:case n.CREATE_DIR:case n.LIST_DIR:case n.DELETE_DIR:p(this,e)[t](r);break;case n.LOG:p(this,i).forEach((t=>t(r)));break;case n.PROGRESS:p(this,s).forEach((t=>t(r)));break;case n.ERROR:p(this,a)[t](r)}delete p(this,e)[t],delete p(this,a)[t]})})),u(this,r,(({type:i,data:s},o=[],r)=>p(this,t)?new Promise(((n,l)=>{const h=m();p(this,t)&&p(this,t).postMessage({id:h,type:i,data:s},o),p(this,e)[h]=n,p(this,a)[h]=l,null==r||r.addEventListener("abort",(()=>{l(new DOMException(`Message # ${h} was aborted`,"AbortError"))}),{once:!0})})):Promise.reject(L))),E(this,"load",(({classWorkerURL:e,...a}={},{signal:i}={})=>(p(this,t)||(f(this,t,e?new Worker(new URL(e,import.meta.url),{type:"module"}):new Worker(new URL(""+new URL("../workers/worker-BDGH5ghy.js",import.meta.url).href,import.meta.url),{type:"module"})),p(this,o).call(this)),p(this,r).call(this,{type:n.LOAD,data:a},void 0,i)))),E(this,"exec",((t,e=-1,{signal:a}={})=>p(this,r).call(this,{type:n.EXEC,data:{args:t,timeout:e}},void 0,a))),E(this,"terminate",(()=>{const i=Object.keys(p(this,a));for(const t of i)p(this,a)[t](g),delete p(this,a)[t],delete p(this,e)[t];p(this,t)&&(p(this,t).terminate(),f(this,t,null),this.loaded=!1)})),E(this,"writeFile",((t,e,{signal:a}={})=>{const i=[];return e instanceof Uint8Array&&i.push(e.buffer),p(this,r).call(this,{type:n.WRITE_FILE,data:{path:t,data:e}},i,a)})),E(this,"mount",((t,e,a)=>p(this,r).call(this,{type:n.MOUNT,data:{fsType:t,options:e,mountPoint:a}},[]))),E(this,"unmount",(t=>p(this,r).call(this,{type:n.UNMOUNT,data:{mountPoint:t}},[]))),E(this,"readFile",((t,e="binary",{signal:a}={})=>p(this,r).call(this,{type:n.READ_FILE,data:{path:t,encoding:e}},void 0,a))),E(this,"deleteFile",((t,{signal:e}={})=>p(this,r).call(this,{type:n.DELETE_FILE,data:{path:t}},void 0,e))),E(this,"rename",((t,e,{signal:a}={})=>p(this,r).call(this,{type:n.RENAME,data:{oldPath:t,newPath:e}},void 0,a))),E(this,"createDir",((t,{signal:e}={})=>p(this,r).call(this,{type:n.CREATE_DIR,data:{path:t}},void 0,e))),E(this,"listDir",((t,{signal:e}={})=>p(this,r).call(this,{type:n.LIST_DIR,data:{path:t}},void 0,e))),E(this,"deleteDir",((t,{signal:e}={})=>p(this,r).call(this,{type:n.DELETE_DIR,data:{path:t}},void 0,e)))}on(t,e){"log"===t?p(this,i).push(e):"progress"===t&&p(this,s).push(e)}off(t,e){"log"===t?f(this,i,p(this,i).filter((t=>t!==e))):"progress"===t&&f(this,s,p(this,s).filter((t=>t!==e)))}}let D;async function I(){D=new y;const t="https://unpkg.com/@ffmpeg/core@0.12.6/dist/esm";async function e(t,e){const a=await fetch(t),i=await a.blob(),s=new Blob([i],{type:e});return URL.createObjectURL(s)}D.on("log",(({message:t})=>{})),await D.load({coreURL:await e(`${t}/ffmpeg-core.js`,"text/javascript"),wasmURL:await e(`${t}/ffmpeg-core.wasm`,"application/wasm")})}t=new WeakMap,e=new WeakMap,a=new WeakMap,i=new WeakMap,s=new WeakMap,o=new WeakMap,r=new WeakMap;const O=R(("undefined"!=typeof localStorage&&"true"===localStorage.getItem("audioOn"))??!1);O.subscribe((t=>{"undefined"!=typeof localStorage&&localStorage.setItem("audioOn",t.toString())}));let T=null,b=null;async function U(t){T=new AudioContext;const e=await async function(t){alert("OGGファイルをmp3に変換します。");const e=await fetch(t),a=await e.arrayBuffer();await D.writeFile("input.ogg",new Uint8Array(a)),await D.exec(["-i","input.ogg","output.mp3"]);const i=await D.readFile("output.mp3"),s=URL.createObjectURL(new Blob([i.buffer],{type:"audio/mp3"}));return alert("OGGファイルをmp3に変換しました。"),s}(t),a=await fetch(e),i=await a.arrayBuffer();try{b=await T.decodeAudioData(i)}catch(s){console.error("Error decoding audio data:",s),alert("ファイルの再生に失敗")}}async function _(t){if(w(O)&&t&&(await U(t),b&&T)){const t=T.createBufferSource();t.buffer=b,t.connect(T.destination),t.start(0)}}export{O as a,I as l,_ as p};
